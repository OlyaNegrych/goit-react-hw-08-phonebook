{"version":3,"file":"static/js/635.f1b140b9.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","redux/contacts/selectors.js","components/Contacts/ContactForm/ContactForm.styled.jsx","components/Contacts/ContactForm/ContactForm.jsx","components/Contacts/Filter/Filter.styled.jsx","components/Contacts/Filter/Filter.jsx","components/Contacts/ContactList/ContactList.styled.jsx","components/Contacts/ContactList/ContactItem.jsx","components/Contacts/ContactList/ContactList.jsx","pages/Contacts/ContactsPage.jsx","pages/Contacts/ContactsPage.styled.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SectionBox = styled.section`\n  padding: 15px;\n  width: 550px;\n  border: 1px solid black;\n  border-radius: 4px;\n  box-shadow: 1px 1px 25px 1px rgba(0, 0, 0, 0.55);\n`;\n","import React from 'react';\nimport {SectionBox} from '../Section/Section.styled'\n\nconst Section = ({ title, children }) => {\n  return (\n    <SectionBox>\n      <h2>{title}</h2>\n      {children}\n    </SectionBox>\n  );\n};\n\nexport default Section;\n","\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from 'styled-components';\nimport { Field } from 'formik';\n\nexport const Label = styled.label`\nfont-size: 16px;\nfont-weight: 500;\n`;\n\nexport const Input = styled(Field)`\n  display: inline-block;\n  font: inherit;\n  font-size: 22px;\n  border-radius: 5px;\n  outline: none;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin-bottom: 10px;\n\n  :focus-within {\n    border: 2px solid #40c4ff;\n    outline: none;\n  }\n`;\n\nexport const AddBtn = styled.button`\n  display: inline-block;\n  width: 120px;\n  height: 38px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  border: 1px solid black;\n  border-radius: 5px;\n  font-size: 18px;\n  font-weight: 500;\n  opacity: 0.7;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover,\n  :focus {\n    opacity: 1;\n    background-color: #00e676;\n    font-weight: 700;\n  }\n`;","import { addContact } from 'redux/contacts/operations';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport { selectContacts } from '../../../redux/contacts/selectors';\nimport { Label, Input, AddBtn } from './ContactForm.styled';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required(),\n  number: Yup.string().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const checkNameInList = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (checkNameInList) {\n      Notiflix.Report.warning(`${name} is already in contacts`);\n      return resetForm();\n    }\n\n    const contact = { id: nanoid(4), name, number };\n    dispatch(addContact(contact));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={validationSchema}\n    >\n      <Form>\n        <Label>\n          Name\n          <br />\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <br />\n        <Label>\n          Number\n          <br />\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <br />\n        <AddBtn type=\"submit\">Add contact</AddBtn>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const FilterInput = styled.input`\n  display: inline-block;\n  font: inherit;\n  font-size: 24px;\n  border-radius: 5px;\n  outline: none;\n  padding-left: 5px;\n  padding-right: 5px;\n\n  :focus-within {\n    border: 2px solid #40c4ff;\n    outline: none;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from '../../../redux/contacts/selectors';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <br />\n      <FilterInput\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n      ></FilterInput>\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n   margin-bottom: 5px;\n   display: flex;\n   justify-content: space-between;\n `;\n\nexport const ContactText = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0;\n  margin-bottom: 5px;\n`;\n\n export const DeleteBtn = styled.button`\n   font-size: 16px;\n   font-weight: 500;\n   border-radius: 5px;\n   /* margin-left: 10px; */\n   opacity: 0.7;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n   :hover,\n   :focus {\n     background-color: red;\n     font-weight: 700;\n     opacity: 1;\n   }\n `;\n\n export const EditBtn = styled.button`\n   font-size: 16px;\n   font-weight: 500;\n   border-radius: 5px;\n   /* margin-left: 10px; */\n   opacity: 0.7;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n   :hover,\n   :focus {\n     background-color: orange;\n     font-weight: 700;\n     opacity: 1;\n   }\n `;\n","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\nimport { EditBtn, DeleteBtn, ContactText } from './ContactList.styled';\nimport { Contact } from './ContactList.styled';\n\nconst ContactItem = ({id, name, number}) => {\n  const dispatch = useDispatch();\n  const [isUpdated, setIsUpdated] = useState(false);\n  const [updateName, setUpdateName] = useState('');\n  const [updateNumber, setUpdateNumber] = useState('');\n\n  const handleChangeContact = e => {\n    const inputName = e.target.name;\n    const inputValue = e.target.value;\n\n    switch (inputName) {\n      case 'name':\n        return setUpdateName(inputValue);\n      case 'number':\n        return setUpdateNumber(inputValue);\n      default:\n        break;\n    }\n  };\n\n  const handleUpdateContact = ({ id, name, number }) => {\n    setIsUpdated(!isUpdated);\n    setUpdateName(name);\n    setUpdateNumber(number);\n\n    if (isUpdated) {\n      dispatch(\n        updateContact({ id, body: { name: updateName, number: updateNumber } })\n      );\n    }\n  };\n\n  const handleDeleteContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <Contact key={id}>\n      {isUpdated ? (\n        <>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={updateName}\n            onChange={handleChangeContact}\n          />\n          <input\n            type=\"text\"\n            name=\"number\"\n            value={updateNumber}\n            onChange={handleChangeContact}\n          />\n        </>\n      ) : (\n        <ContactText>\n          {name}: {number}\n        </ContactText>\n      )}\n\n      <div>\n        <EditBtn\n          type=\"button\"\n          onClick={() => handleUpdateContact({ id, name, number })}\n        >\n          {isUpdated ? 'Save' : 'Edit'}\n        </EditBtn>\n\n        <DeleteBtn type=\"button\" onClick={() => handleDeleteContact(id)}>\n          Delete\n        </DeleteBtn>\n      </div>\n    </Contact>\n  );\n};\n\nexport default ContactItem;\n","import { useSelector } from 'react-redux';\nimport ContactItem from './ContactItem';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n \n  return (\n    <ul style={{padding: 0}}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id} name={name} number={number} id={id} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from '../../components/Contacts/ContactForm/ContactForm';\nimport Filter from '../../components/Contacts/Filter/Filter';\nimport ContactList from 'components/Contacts/ContactList/ContactList';\nimport Section from '../../components/Section/Section';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../../redux/contacts/selectors';\nimport { StyledConactPage } from './ContactsPage.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <StyledConactPage>\n      <Section title=\"Add new contact\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        <br />\n        {isLoading && !error && <b>Request in progress...</b>}\n        <ContactList />\n      </Section>\n    </StyledConactPage>\n  );\n};\n\nexport default ContactsPage;\n","import styled from 'styled-components';\n\nexport const StyledConactPage = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n`;\n"],"names":["SectionBox","styled","title","children","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","normalizedFilter","toLowerCase","contact","name","includes","Label","Input","Field","AddBtn","validationSchema","Yup","required","number","initialValues","dispatch","useDispatch","useSelector","onSubmit","resetForm","checkNameInList","some","Notiflix","id","nanoid","addContact","type","pattern","FilterLabel","FilterInput","value","onChange","e","setFilter","target","Contact","ContactText","DeleteBtn","EditBtn","useState","isUpdated","setIsUpdated","updateName","setUpdateName","updateNumber","setUpdateNumber","handleChangeContact","inputName","inputValue","onClick","updateContact","body","handleUpdateContact","deleteContact","handleDeleteContact","visibleContacts","style","padding","map","useEffect","fetchContacts","Section","StyledConactPage"],"sourceRoot":""}