{"version":3,"file":"static/js/935.413fe365.chunk.js","mappings":"sNAGaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAejB,OACE,kBAAMC,SAda,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfN,GACEO,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACN,EAGC,WACE,yCAEE,kBAAOC,KAAK,OAAON,KAAK,aAE1B,mBACA,sCAEE,kBAAOM,KAAK,QAAQN,KAAK,cAE3B,mBACA,yCAEE,kBAAOM,KAAK,WAAWN,KAAK,iBAE9B,mBACA,mBAAQM,KAAK,SAAb,wBAGL,ECrCc,SAASC,IACtB,OACE,0BACE,SAAChB,EAAD,KAGL,C,qICLDiB,EAAAA,GAAAA,SAAAA,QAAyB,wCAEzB,IAAMC,EAAgB,SAAAC,GACpBF,EAAAA,GAAAA,SAAAA,QAAAA,OAAAA,cAAA,iBAAwDE,EACzD,EAMYX,GAAWY,EAAAA,EAAAA,IACtB,gBADsC,mCAEtC,WAAOC,EAAaC,GAApB,gGAEsBL,EAAAA,GAAAA,KAAW,gBAAiBI,GAFlD,cAEUE,EAFV,OAGIL,EAAcK,EAAIC,KAAKL,OAH3B,kBAIWI,EAAIC,MAJf,yDAMWF,EAASG,gBAAgB,KAAMC,UAN1C,yDAFsC,yDAa3BC,GAAQP,EAAAA,EAAAA,IACnB,aADmC,mCAEnC,WAAOC,EAAaC,GAApB,gGAEsBL,EAAAA,GAAAA,KAAW,eAAgBI,GAFjD,cAEUE,EAFV,OAGIL,EAAcK,EAAIC,KAAKL,OAH3B,kBAIWI,EAAIC,MAJf,yDAMWF,EAASG,gBAAgB,KAAMC,UAN1C,yDAFmC,0DAafN,EAAAA,EAAAA,IAAiB,cAAD,mCAAgB,WAAOQ,EAAGN,GAAV,0FAE5CL,EAAAA,GAAAA,KAAW,iBAFiC,OA7BpDA,EAAAA,GAAAA,SAAAA,QAAAA,OAAAA,cAA8C,GA6BM,wEAK3CK,EAASG,gBAAgB,KAAMC,UALY,wDAAhB,0DAUXN,EAAAA,EAAAA,IACzB,eADyC,mCAEzC,WAAOQ,EAAGN,GAAV,8EACQO,EAAQP,EAASQ,WAGA,QAFjBC,EAAiBF,EAAMG,KAAKb,OAFpC,yCAKWG,EAASG,gBAAgB,yBALpC,uBASIP,EAAca,GATlB,SAUsBd,EAAAA,GAAAA,IAAU,aAVhC,cAUUM,EAVV,yBAWWA,EAAIC,MAXf,2DAaWF,EAASG,gBAAgB,KAAMC,UAb1C,0DAFyC,wD","sources":["components/Auth/RegisterForm/RegisterForm.jsx","pages/Register/RegisterPage.jsx","redux/auth/operations.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from '../../../redux/auth/operations';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Username\n        <input type=\"text\" name=\"name\" />\n      </label>\n      <br />\n      <label>\n        Email\n        <input type=\"email\" name=\"email\" />\n      </label>\n      <br />\n      <label>\n        Password\n        <input type=\"password\" name=\"password\" />\n      </label>\n      <br />\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n","import { RegisterForm } from 'components/Auth/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n}\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials, thunkAPI) => {\n    try {\n      const res = await axios.post('/users/signup', credentials);\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const logIn = createAsyncThunk(\n  'auth/login',\n  async (credentials, thunkAPI) => {\n    try {\n      const res = await axios.post('/users/login', credentials);\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    await axios.post('/users/logout');\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n\nexport const refreshUser = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState();\n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      return thunkAPI.rejectWithValue('Unable to fetch user');\n    }\n\n    try {\n      setAuthHeader(persistedToken);\n      const res = await axios.get('/users/me');\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n"],"names":["RegisterForm","dispatch","useDispatch","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","type","Register","axios","setAuthHeader","token","createAsyncThunk","credentials","thunkAPI","res","data","rejectWithValue","message","logIn","_","state","getState","persistedToken","auth"],"sourceRoot":""}